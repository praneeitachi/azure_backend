# -*- coding: utf-8 -*-
"""Copy of AzureML_Promptflow_evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NEDU7CkQR5mt5utHaScFIxqh8lt10_7U
"""

import urllib.request
import json
import os
import ssl

def calculate_relevance_score(context,question,answer):
    def allowSelfSignedHttps(allowed):
    # bypass the server certificate verification on client side
        if allowed and not os.environ.get('PYTHONHTTPSVERIFY', '') and getattr(ssl, '_create_unverified_context', None):
            ssl._create_default_https_context = ssl._create_unverified_context

    allowSelfSignedHttps(True) # this line is needed if you use self-signed certificate in your scoring service.
    # Request data goes here
    # The example below assumes JSON formatting which may be updated
    # depending on the format your endpoint expects.
    # More information can be found here:
    # https://docs.microsoft.com/azure/machine-learning/how-to-deploy-advanced-entry-script
    data = {
      "answer":answer ,
      "context": context,
      "line_number": 0,
      "question": question,
      "variant_id": "variant_0"
    }


    body = str.encode(json.dumps(data))

    #url = 'https://relevance-evaluation-endpoint.eastus2.inference.ml.azure.com/score'
    # Replace this with the primary/secondary key or AMLToken for the endpoint
    #api_key = 'fWBvYneVsvryme3bNVQGDrtUITmovJkx'
    url = 'https://ret-eval-flow.centralus.inference.ml.azure.com/score'
    # Replace this with the primary/secondary key or AMLToken for the endpoint
    api_key = '7dzlKxI1eb1aPVSvpGatMryVgx6cS2TM'
    if not api_key:
        raise Exception("A key should be provided to invoke the endpoint")

    # The azureml-model-deployment header will force the request to go to a specific deployment.
    # Remove this header to have the request observe the endpoint traffic rules
    headers = {'Content-Type':'application/json', 'Authorization':('Bearer '+ api_key), 'azureml-model-deployment': 'ret-eval-flow-1' }
    #headers = {'Content-Type':'application/json', 'Authorization':('Bearer '+ api_key), 'azureml-model-deployment': 'relevance-evaluation-endpoint-1' }

    req = urllib.request.Request(url, body, headers)

    try:
        response = urllib.request.urlopen(req)

        result = response.read()
        # print(result)
    except urllib.error.HTTPError as error:
        print("The request failed with status code: " + str(error.code))

        # Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
        print(error.info())
        print(error.read().decode("utf8", 'ignore'))

    # Decode the byte string to get a regular string
    regular_string = result.decode('utf-8')

    # Parse the JSON data from the regular string
    data = json.loads(regular_string)

    # Now you can access the values in the JSON data
    print("data['gpt_relevance'] : ",data['gpt_relevance'])
    if data['gpt_relevance']=="NaN" or data['gpt_relevance']=="0.0" :
       return 0
    else:
        try:
            gpt_relevance = int(data['gpt_relevance'])
        except:
            return 0


        return gpt_relevance
